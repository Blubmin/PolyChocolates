#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolyChocolates
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="database")]
	public partial class databaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChecklist(Checklist instance);
    partial void UpdateChecklist(Checklist instance);
    partial void DeleteChecklist(Checklist instance);
    partial void InsertTraceability(Traceability instance);
    partial void UpdateTraceability(Traceability instance);
    partial void DeleteTraceability(Traceability instance);
    partial void InsertChocolateBarWeight(ChocolateBarWeight instance);
    partial void UpdateChocolateBarWeight(ChocolateBarWeight instance);
    partial void DeleteChocolateBarWeight(ChocolateBarWeight instance);
    partial void InsertChocolateControl(ChocolateControl instance);
    partial void UpdateChocolateControl(ChocolateControl instance);
    partial void DeleteChocolateControl(ChocolateControl instance);
    partial void InsertChocolateQuality(ChocolateQuality instance);
    partial void UpdateChocolateQuality(ChocolateQuality instance);
    partial void DeleteChocolateQuality(ChocolateQuality instance);
    partial void InsertEfficiency(Efficiency instance);
    partial void UpdateEfficiency(Efficiency instance);
    partial void DeleteEfficiency(Efficiency instance);
    partial void InsertEfficiencyWaste(EfficiencyWaste instance);
    partial void UpdateEfficiencyWaste(EfficiencyWaste instance);
    partial void DeleteEfficiencyWaste(EfficiencyWaste instance);
    partial void InsertProductQualityEntryQual(ProductQualityEntryQual instance);
    partial void UpdateProductQualityEntryQual(ProductQualityEntryQual instance);
    partial void DeleteProductQualityEntryQual(ProductQualityEntryQual instance);
    partial void InsertProductQualityEntryQuant(ProductQualityEntryQuant instance);
    partial void UpdateProductQualityEntryQuant(ProductQualityEntryQuant instance);
    partial void DeleteProductQualityEntryQuant(ProductQualityEntryQuant instance);
    partial void InsertQualityControl(QualityControl instance);
    partial void UpdateQualityControl(QualityControl instance);
    partial void DeleteQualityControl(QualityControl instance);
    partial void InsertQualityLabelQual(QualityLabelQual instance);
    partial void UpdateQualityLabelQual(QualityLabelQual instance);
    partial void DeleteQualityLabelQual(QualityLabelQual instance);
    partial void InsertQualityLabelQuant(QualityLabelQuant instance);
    partial void UpdateQualityLabelQuant(QualityLabelQuant instance);
    partial void DeleteQualityLabelQuant(QualityLabelQuant instance);
    partial void InsertRecipeIngredient(RecipeIngredient instance);
    partial void UpdateRecipeIngredient(RecipeIngredient instance);
    partial void DeleteRecipeIngredient(RecipeIngredient instance);
    partial void InsertRecipeStep(RecipeStep instance);
    partial void UpdateRecipeStep(RecipeStep instance);
    partial void DeleteRecipeStep(RecipeStep instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertRecipe(Recipe instance);
    partial void UpdateRecipe(Recipe instance);
    partial void DeleteRecipe(Recipe instance);
    partial void InsertInvoiceRow(InvoiceRow instance);
    partial void UpdateInvoiceRow(InvoiceRow instance);
    partial void DeleteInvoiceRow(InvoiceRow instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertProductEntry(ProductEntry instance);
    partial void UpdateProductEntry(ProductEntry instance);
    partial void DeleteProductEntry(ProductEntry instance);
    #endregion
		
		public databaseDataContext() : 
				base(global::PolyChocolates.Properties.Settings.Default.databaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Checklist> Checklists
		{
			get
			{
				return this.GetTable<Checklist>();
			}
		}
		
		public System.Data.Linq.Table<Traceability> Traceabilities
		{
			get
			{
				return this.GetTable<Traceability>();
			}
		}
		
		public System.Data.Linq.Table<ChocolateBarWeight> ChocolateBarWeights
		{
			get
			{
				return this.GetTable<ChocolateBarWeight>();
			}
		}
		
		public System.Data.Linq.Table<ChocolateControl> ChocolateControls
		{
			get
			{
				return this.GetTable<ChocolateControl>();
			}
		}
		
		public System.Data.Linq.Table<ChocolateQuality> ChocolateQualities
		{
			get
			{
				return this.GetTable<ChocolateQuality>();
			}
		}
		
		public System.Data.Linq.Table<Efficiency> Efficiencies
		{
			get
			{
				return this.GetTable<Efficiency>();
			}
		}
		
		public System.Data.Linq.Table<EfficiencyWaste> EfficiencyWastes
		{
			get
			{
				return this.GetTable<EfficiencyWaste>();
			}
		}
		
		public System.Data.Linq.Table<ProductQualityEntryQual> ProductQualityEntryQuals
		{
			get
			{
				return this.GetTable<ProductQualityEntryQual>();
			}
		}
		
		public System.Data.Linq.Table<ProductQualityEntryQuant> ProductQualityEntryQuants
		{
			get
			{
				return this.GetTable<ProductQualityEntryQuant>();
			}
		}
		
		public System.Data.Linq.Table<QualityControl> QualityControls
		{
			get
			{
				return this.GetTable<QualityControl>();
			}
		}
		
		public System.Data.Linq.Table<QualityLabelQual> QualityLabelQuals
		{
			get
			{
				return this.GetTable<QualityLabelQual>();
			}
		}
		
		public System.Data.Linq.Table<QualityLabelQuant> QualityLabelQuants
		{
			get
			{
				return this.GetTable<QualityLabelQuant>();
			}
		}
		
		public System.Data.Linq.Table<RecipeIngredient> RecipeIngredients
		{
			get
			{
				return this.GetTable<RecipeIngredient>();
			}
		}
		
		public System.Data.Linq.Table<RecipeStep> RecipeSteps
		{
			get
			{
				return this.GetTable<RecipeStep>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<Recipe> Recipes
		{
			get
			{
				return this.GetTable<Recipe>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceRow> InvoiceRows
		{
			get
			{
				return this.GetTable<InvoiceRow>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<ProductEntry> ProductEntries
		{
			get
			{
				return this.GetTable<ProductEntry>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Checklist")]
	public partial class Checklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChecklistId;
		
		private string _CodeDate;
		
		private string _Type;
		
		private string _Initials;
		
		private string _Complete;
		
		private string _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChecklistIdChanging(int value);
    partial void OnChecklistIdChanged();
    partial void OnCodeDateChanging(string value);
    partial void OnCodeDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnInitialsChanging(string value);
    partial void OnInitialsChanged();
    partial void OnCompleteChanging(string value);
    partial void OnCompleteChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Checklist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChecklistId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChecklistId
		{
			get
			{
				return this._ChecklistId;
			}
			set
			{
				if ((this._ChecklistId != value))
				{
					this.OnChecklistIdChanging(value);
					this.SendPropertyChanging();
					this._ChecklistId = value;
					this.SendPropertyChanged("ChecklistId");
					this.OnChecklistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeDate", DbType="VarChar(MAX)")]
		public string CodeDate
		{
			get
			{
				return this._CodeDate;
			}
			set
			{
				if ((this._CodeDate != value))
				{
					this.OnCodeDateChanging(value);
					this.SendPropertyChanging();
					this._CodeDate = value;
					this.SendPropertyChanged("CodeDate");
					this.OnCodeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initials", DbType="VarChar(MAX)")]
		public string Initials
		{
			get
			{
				return this._Initials;
			}
			set
			{
				if ((this._Initials != value))
				{
					this.OnInitialsChanging(value);
					this.SendPropertyChanging();
					this._Initials = value;
					this.SendPropertyChanged("Initials");
					this.OnInitialsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="VarChar(MAX)")]
		public string Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Traceability")]
	public partial class Traceability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TraceabilityId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private System.Nullable<int> _InventoryId;
		
		private System.Nullable<double> _AmountUsed;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraceabilityIdChanging(int value);
    partial void OnTraceabilityIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnInventoryIdChanging(System.Nullable<int> value);
    partial void OnInventoryIdChanged();
    partial void OnAmountUsedChanging(System.Nullable<double> value);
    partial void OnAmountUsedChanged();
    #endregion
		
		public Traceability()
		{
			this._Inventory = default(EntityRef<Inventory>);
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraceabilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TraceabilityId
		{
			get
			{
				return this._TraceabilityId;
			}
			set
			{
				if ((this._TraceabilityId != value))
				{
					this.OnTraceabilityIdChanging(value);
					this.SendPropertyChanging();
					this._TraceabilityId = value;
					this.SendPropertyChanged("TraceabilityId");
					this.OnTraceabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", DbType="Int")]
		public System.Nullable<int> InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountUsed", DbType="Float")]
		public System.Nullable<double> AmountUsed
		{
			get
			{
				return this._AmountUsed;
			}
			set
			{
				if ((this._AmountUsed != value))
				{
					this.OnAmountUsedChanging(value);
					this.SendPropertyChanging();
					this._AmountUsed = value;
					this.SendPropertyChanged("AmountUsed");
					this.OnAmountUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_Traceability", Storage="_Inventory", ThisKey="InventoryId", OtherKey="InventoryId", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.Traceabilities.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.Traceabilities.Add(this);
						this._InventoryId = value.InventoryId;
					}
					else
					{
						this._InventoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_Traceability", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.Traceabilities.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.Traceabilities.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChocolateBarWeight")]
	public partial class ChocolateBarWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChocolateBarWeightId;
		
		private System.Nullable<int> _ChocolateQualityId;
		
		private string _Bar1;
		
		private string _Bar2;
		
		private string _Bar3;
		
		private string _Bar4;
		
		private string _Bar5;
		
		private EntityRef<ChocolateQuality> _ChocolateQuality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChocolateBarWeightIdChanging(int value);
    partial void OnChocolateBarWeightIdChanged();
    partial void OnChocolateQualityIdChanging(System.Nullable<int> value);
    partial void OnChocolateQualityIdChanged();
    partial void OnBar1Changing(string value);
    partial void OnBar1Changed();
    partial void OnBar2Changing(string value);
    partial void OnBar2Changed();
    partial void OnBar3Changing(string value);
    partial void OnBar3Changed();
    partial void OnBar4Changing(string value);
    partial void OnBar4Changed();
    partial void OnBar5Changing(string value);
    partial void OnBar5Changed();
    #endregion
		
		public ChocolateBarWeight()
		{
			this._ChocolateQuality = default(EntityRef<ChocolateQuality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChocolateBarWeightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChocolateBarWeightId
		{
			get
			{
				return this._ChocolateBarWeightId;
			}
			set
			{
				if ((this._ChocolateBarWeightId != value))
				{
					this.OnChocolateBarWeightIdChanging(value);
					this.SendPropertyChanging();
					this._ChocolateBarWeightId = value;
					this.SendPropertyChanged("ChocolateBarWeightId");
					this.OnChocolateBarWeightIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChocolateQualityId", DbType="Int")]
		public System.Nullable<int> ChocolateQualityId
		{
			get
			{
				return this._ChocolateQualityId;
			}
			set
			{
				if ((this._ChocolateQualityId != value))
				{
					if (this._ChocolateQuality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChocolateQualityIdChanging(value);
					this.SendPropertyChanging();
					this._ChocolateQualityId = value;
					this.SendPropertyChanged("ChocolateQualityId");
					this.OnChocolateQualityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bar1", DbType="VarChar(MAX)")]
		public string Bar1
		{
			get
			{
				return this._Bar1;
			}
			set
			{
				if ((this._Bar1 != value))
				{
					this.OnBar1Changing(value);
					this.SendPropertyChanging();
					this._Bar1 = value;
					this.SendPropertyChanged("Bar1");
					this.OnBar1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bar2", DbType="VarChar(MAX)")]
		public string Bar2
		{
			get
			{
				return this._Bar2;
			}
			set
			{
				if ((this._Bar2 != value))
				{
					this.OnBar2Changing(value);
					this.SendPropertyChanging();
					this._Bar2 = value;
					this.SendPropertyChanged("Bar2");
					this.OnBar2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bar3", DbType="VarChar(MAX)")]
		public string Bar3
		{
			get
			{
				return this._Bar3;
			}
			set
			{
				if ((this._Bar3 != value))
				{
					this.OnBar3Changing(value);
					this.SendPropertyChanging();
					this._Bar3 = value;
					this.SendPropertyChanged("Bar3");
					this.OnBar3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bar4", DbType="VarChar(MAX)")]
		public string Bar4
		{
			get
			{
				return this._Bar4;
			}
			set
			{
				if ((this._Bar4 != value))
				{
					this.OnBar4Changing(value);
					this.SendPropertyChanging();
					this._Bar4 = value;
					this.SendPropertyChanged("Bar4");
					this.OnBar4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bar5", DbType="VarChar(MAX)")]
		public string Bar5
		{
			get
			{
				return this._Bar5;
			}
			set
			{
				if ((this._Bar5 != value))
				{
					this.OnBar5Changing(value);
					this.SendPropertyChanging();
					this._Bar5 = value;
					this.SendPropertyChanged("Bar5");
					this.OnBar5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChocolateQuality_ChocolateBarWeight", Storage="_ChocolateQuality", ThisKey="ChocolateQualityId", OtherKey="ChocolateQualityId", IsForeignKey=true)]
		public ChocolateQuality ChocolateQuality
		{
			get
			{
				return this._ChocolateQuality.Entity;
			}
			set
			{
				ChocolateQuality previousValue = this._ChocolateQuality.Entity;
				if (((previousValue != value) 
							|| (this._ChocolateQuality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChocolateQuality.Entity = null;
						previousValue.ChocolateBarWeights.Remove(this);
					}
					this._ChocolateQuality.Entity = value;
					if ((value != null))
					{
						value.ChocolateBarWeights.Add(this);
						this._ChocolateQualityId = value.ChocolateQualityId;
					}
					else
					{
						this._ChocolateQualityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChocolateQuality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChocolateControl")]
	public partial class ChocolateControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChocolateControlId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private string _MilkMachine1;
		
		private string _MilkMachine2;
		
		private string _DarkMachine;
		
		private string _Weight1;
		
		private string _Weight2;
		
		private string _Weight3;
		
		private string _Temper;
		
		private string _Appearance;
		
		private string _Flavor;
		
		private string _TasteTest;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChocolateControlIdChanging(int value);
    partial void OnChocolateControlIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnMilkMachine1Changing(string value);
    partial void OnMilkMachine1Changed();
    partial void OnMilkMachine2Changing(string value);
    partial void OnMilkMachine2Changed();
    partial void OnDarkMachineChanging(string value);
    partial void OnDarkMachineChanged();
    partial void OnWeight1Changing(string value);
    partial void OnWeight1Changed();
    partial void OnWeight2Changing(string value);
    partial void OnWeight2Changed();
    partial void OnWeight3Changing(string value);
    partial void OnWeight3Changed();
    partial void OnTemperChanging(string value);
    partial void OnTemperChanged();
    partial void OnAppearanceChanging(string value);
    partial void OnAppearanceChanged();
    partial void OnFlavorChanging(string value);
    partial void OnFlavorChanged();
    partial void OnTasteTestChanging(string value);
    partial void OnTasteTestChanged();
    #endregion
		
		public ChocolateControl()
		{
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChocolateControlId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChocolateControlId
		{
			get
			{
				return this._ChocolateControlId;
			}
			set
			{
				if ((this._ChocolateControlId != value))
				{
					this.OnChocolateControlIdChanging(value);
					this.SendPropertyChanging();
					this._ChocolateControlId = value;
					this.SendPropertyChanged("ChocolateControlId");
					this.OnChocolateControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkMachine1", DbType="VarChar(MAX)")]
		public string MilkMachine1
		{
			get
			{
				return this._MilkMachine1;
			}
			set
			{
				if ((this._MilkMachine1 != value))
				{
					this.OnMilkMachine1Changing(value);
					this.SendPropertyChanging();
					this._MilkMachine1 = value;
					this.SendPropertyChanged("MilkMachine1");
					this.OnMilkMachine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkMachine2", DbType="VarChar(MAX)")]
		public string MilkMachine2
		{
			get
			{
				return this._MilkMachine2;
			}
			set
			{
				if ((this._MilkMachine2 != value))
				{
					this.OnMilkMachine2Changing(value);
					this.SendPropertyChanging();
					this._MilkMachine2 = value;
					this.SendPropertyChanged("MilkMachine2");
					this.OnMilkMachine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DarkMachine", DbType="VarChar(MAX)")]
		public string DarkMachine
		{
			get
			{
				return this._DarkMachine;
			}
			set
			{
				if ((this._DarkMachine != value))
				{
					this.OnDarkMachineChanging(value);
					this.SendPropertyChanging();
					this._DarkMachine = value;
					this.SendPropertyChanged("DarkMachine");
					this.OnDarkMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight1", DbType="VarChar(MAX)")]
		public string Weight1
		{
			get
			{
				return this._Weight1;
			}
			set
			{
				if ((this._Weight1 != value))
				{
					this.OnWeight1Changing(value);
					this.SendPropertyChanging();
					this._Weight1 = value;
					this.SendPropertyChanged("Weight1");
					this.OnWeight1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight2", DbType="VarChar(MAX)")]
		public string Weight2
		{
			get
			{
				return this._Weight2;
			}
			set
			{
				if ((this._Weight2 != value))
				{
					this.OnWeight2Changing(value);
					this.SendPropertyChanging();
					this._Weight2 = value;
					this.SendPropertyChanged("Weight2");
					this.OnWeight2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight3", DbType="VarChar(MAX)")]
		public string Weight3
		{
			get
			{
				return this._Weight3;
			}
			set
			{
				if ((this._Weight3 != value))
				{
					this.OnWeight3Changing(value);
					this.SendPropertyChanging();
					this._Weight3 = value;
					this.SendPropertyChanged("Weight3");
					this.OnWeight3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temper", DbType="VarChar(MAX)")]
		public string Temper
		{
			get
			{
				return this._Temper;
			}
			set
			{
				if ((this._Temper != value))
				{
					this.OnTemperChanging(value);
					this.SendPropertyChanging();
					this._Temper = value;
					this.SendPropertyChanged("Temper");
					this.OnTemperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appearance", DbType="VarChar(MAX)")]
		public string Appearance
		{
			get
			{
				return this._Appearance;
			}
			set
			{
				if ((this._Appearance != value))
				{
					this.OnAppearanceChanging(value);
					this.SendPropertyChanging();
					this._Appearance = value;
					this.SendPropertyChanged("Appearance");
					this.OnAppearanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flavor", DbType="VarChar(MAX)")]
		public string Flavor
		{
			get
			{
				return this._Flavor;
			}
			set
			{
				if ((this._Flavor != value))
				{
					this.OnFlavorChanging(value);
					this.SendPropertyChanging();
					this._Flavor = value;
					this.SendPropertyChanged("Flavor");
					this.OnFlavorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TasteTest", DbType="VarChar(MAX)")]
		public string TasteTest
		{
			get
			{
				return this._TasteTest;
			}
			set
			{
				if ((this._TasteTest != value))
				{
					this.OnTasteTestChanging(value);
					this.SendPropertyChanging();
					this._TasteTest = value;
					this.SendPropertyChanged("TasteTest");
					this.OnTasteTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ChocolateControl", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.ChocolateControls.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.ChocolateControls.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChocolateQuality")]
	public partial class ChocolateQuality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChocolateQualityId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private string _MilkMachine1;
		
		private string _MilkMachine2;
		
		private string _DarkMachine;
		
		private string _Weight1;
		
		private string _Weight2;
		
		private string _Weight3;
		
		private string _Temper;
		
		private string _Appearance;
		
		private string _Flavor;
		
		private string _TasteTest;
		
		private EntitySet<ChocolateBarWeight> _ChocolateBarWeights;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChocolateQualityIdChanging(int value);
    partial void OnChocolateQualityIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnMilkMachine1Changing(string value);
    partial void OnMilkMachine1Changed();
    partial void OnMilkMachine2Changing(string value);
    partial void OnMilkMachine2Changed();
    partial void OnDarkMachineChanging(string value);
    partial void OnDarkMachineChanged();
    partial void OnWeight1Changing(string value);
    partial void OnWeight1Changed();
    partial void OnWeight2Changing(string value);
    partial void OnWeight2Changed();
    partial void OnWeight3Changing(string value);
    partial void OnWeight3Changed();
    partial void OnTemperChanging(string value);
    partial void OnTemperChanged();
    partial void OnAppearanceChanging(string value);
    partial void OnAppearanceChanged();
    partial void OnFlavorChanging(string value);
    partial void OnFlavorChanged();
    partial void OnTasteTestChanging(string value);
    partial void OnTasteTestChanged();
    #endregion
		
		public ChocolateQuality()
		{
			this._ChocolateBarWeights = new EntitySet<ChocolateBarWeight>(new Action<ChocolateBarWeight>(this.attach_ChocolateBarWeights), new Action<ChocolateBarWeight>(this.detach_ChocolateBarWeights));
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChocolateQualityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChocolateQualityId
		{
			get
			{
				return this._ChocolateQualityId;
			}
			set
			{
				if ((this._ChocolateQualityId != value))
				{
					this.OnChocolateQualityIdChanging(value);
					this.SendPropertyChanging();
					this._ChocolateQualityId = value;
					this.SendPropertyChanged("ChocolateQualityId");
					this.OnChocolateQualityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkMachine1", DbType="VarChar(MAX)")]
		public string MilkMachine1
		{
			get
			{
				return this._MilkMachine1;
			}
			set
			{
				if ((this._MilkMachine1 != value))
				{
					this.OnMilkMachine1Changing(value);
					this.SendPropertyChanging();
					this._MilkMachine1 = value;
					this.SendPropertyChanged("MilkMachine1");
					this.OnMilkMachine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilkMachine2", DbType="VarChar(MAX)")]
		public string MilkMachine2
		{
			get
			{
				return this._MilkMachine2;
			}
			set
			{
				if ((this._MilkMachine2 != value))
				{
					this.OnMilkMachine2Changing(value);
					this.SendPropertyChanging();
					this._MilkMachine2 = value;
					this.SendPropertyChanged("MilkMachine2");
					this.OnMilkMachine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DarkMachine", DbType="VarChar(MAX)")]
		public string DarkMachine
		{
			get
			{
				return this._DarkMachine;
			}
			set
			{
				if ((this._DarkMachine != value))
				{
					this.OnDarkMachineChanging(value);
					this.SendPropertyChanging();
					this._DarkMachine = value;
					this.SendPropertyChanged("DarkMachine");
					this.OnDarkMachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight1", DbType="VarChar(MAX)")]
		public string Weight1
		{
			get
			{
				return this._Weight1;
			}
			set
			{
				if ((this._Weight1 != value))
				{
					this.OnWeight1Changing(value);
					this.SendPropertyChanging();
					this._Weight1 = value;
					this.SendPropertyChanged("Weight1");
					this.OnWeight1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight2", DbType="VarChar(MAX)")]
		public string Weight2
		{
			get
			{
				return this._Weight2;
			}
			set
			{
				if ((this._Weight2 != value))
				{
					this.OnWeight2Changing(value);
					this.SendPropertyChanging();
					this._Weight2 = value;
					this.SendPropertyChanged("Weight2");
					this.OnWeight2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight3", DbType="VarChar(MAX)")]
		public string Weight3
		{
			get
			{
				return this._Weight3;
			}
			set
			{
				if ((this._Weight3 != value))
				{
					this.OnWeight3Changing(value);
					this.SendPropertyChanging();
					this._Weight3 = value;
					this.SendPropertyChanged("Weight3");
					this.OnWeight3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temper", DbType="VarChar(MAX)")]
		public string Temper
		{
			get
			{
				return this._Temper;
			}
			set
			{
				if ((this._Temper != value))
				{
					this.OnTemperChanging(value);
					this.SendPropertyChanging();
					this._Temper = value;
					this.SendPropertyChanged("Temper");
					this.OnTemperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appearance", DbType="VarChar(MAX)")]
		public string Appearance
		{
			get
			{
				return this._Appearance;
			}
			set
			{
				if ((this._Appearance != value))
				{
					this.OnAppearanceChanging(value);
					this.SendPropertyChanging();
					this._Appearance = value;
					this.SendPropertyChanged("Appearance");
					this.OnAppearanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flavor", DbType="VarChar(MAX)")]
		public string Flavor
		{
			get
			{
				return this._Flavor;
			}
			set
			{
				if ((this._Flavor != value))
				{
					this.OnFlavorChanging(value);
					this.SendPropertyChanging();
					this._Flavor = value;
					this.SendPropertyChanged("Flavor");
					this.OnFlavorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TasteTest", DbType="VarChar(MAX)")]
		public string TasteTest
		{
			get
			{
				return this._TasteTest;
			}
			set
			{
				if ((this._TasteTest != value))
				{
					this.OnTasteTestChanging(value);
					this.SendPropertyChanging();
					this._TasteTest = value;
					this.SendPropertyChanged("TasteTest");
					this.OnTasteTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChocolateQuality_ChocolateBarWeight", Storage="_ChocolateBarWeights", ThisKey="ChocolateQualityId", OtherKey="ChocolateQualityId")]
		public EntitySet<ChocolateBarWeight> ChocolateBarWeights
		{
			get
			{
				return this._ChocolateBarWeights;
			}
			set
			{
				this._ChocolateBarWeights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ChocolateQuality", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.ChocolateQualities.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.ChocolateQualities.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChocolateBarWeights(ChocolateBarWeight entity)
		{
			this.SendPropertyChanging();
			entity.ChocolateQuality = this;
		}
		
		private void detach_ChocolateBarWeights(ChocolateBarWeight entity)
		{
			this.SendPropertyChanging();
			entity.ChocolateQuality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Efficiency")]
	public partial class Efficiency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EfficiencyId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private System.Nullable<double> _ActualYield;
		
		private System.Nullable<double> _ItemWeight;
		
		private EntitySet<EfficiencyWaste> _EfficiencyWastes;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEfficiencyIdChanging(int value);
    partial void OnEfficiencyIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnActualYieldChanging(System.Nullable<double> value);
    partial void OnActualYieldChanged();
    partial void OnItemWeightChanging(System.Nullable<double> value);
    partial void OnItemWeightChanged();
    #endregion
		
		public Efficiency()
		{
			this._EfficiencyWastes = new EntitySet<EfficiencyWaste>(new Action<EfficiencyWaste>(this.attach_EfficiencyWastes), new Action<EfficiencyWaste>(this.detach_EfficiencyWastes));
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EfficiencyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EfficiencyId
		{
			get
			{
				return this._EfficiencyId;
			}
			set
			{
				if ((this._EfficiencyId != value))
				{
					this.OnEfficiencyIdChanging(value);
					this.SendPropertyChanging();
					this._EfficiencyId = value;
					this.SendPropertyChanged("EfficiencyId");
					this.OnEfficiencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualYield", DbType="Float")]
		public System.Nullable<double> ActualYield
		{
			get
			{
				return this._ActualYield;
			}
			set
			{
				if ((this._ActualYield != value))
				{
					this.OnActualYieldChanging(value);
					this.SendPropertyChanging();
					this._ActualYield = value;
					this.SendPropertyChanged("ActualYield");
					this.OnActualYieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemWeight", DbType="Float")]
		public System.Nullable<double> ItemWeight
		{
			get
			{
				return this._ItemWeight;
			}
			set
			{
				if ((this._ItemWeight != value))
				{
					this.OnItemWeightChanging(value);
					this.SendPropertyChanging();
					this._ItemWeight = value;
					this.SendPropertyChanged("ItemWeight");
					this.OnItemWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Efficiency_EfficiencyWaste", Storage="_EfficiencyWastes", ThisKey="EfficiencyId", OtherKey="EfficiencyId")]
		public EntitySet<EfficiencyWaste> EfficiencyWastes
		{
			get
			{
				return this._EfficiencyWastes;
			}
			set
			{
				this._EfficiencyWastes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_Efficiency", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.Efficiencies.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.Efficiencies.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EfficiencyWastes(EfficiencyWaste entity)
		{
			this.SendPropertyChanging();
			entity.Efficiency = this;
		}
		
		private void detach_EfficiencyWastes(EfficiencyWaste entity)
		{
			this.SendPropertyChanging();
			entity.Efficiency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EfficiencyWaste")]
	public partial class EfficiencyWaste : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EfficiencyWasteId;
		
		private System.Nullable<int> _EfficiencyId;
		
		private string _WasteType;
		
		private System.Nullable<double> _Amount;
		
		private EntityRef<Efficiency> _Efficiency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEfficiencyWasteIdChanging(int value);
    partial void OnEfficiencyWasteIdChanged();
    partial void OnEfficiencyIdChanging(System.Nullable<int> value);
    partial void OnEfficiencyIdChanged();
    partial void OnWasteTypeChanging(string value);
    partial void OnWasteTypeChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    #endregion
		
		public EfficiencyWaste()
		{
			this._Efficiency = default(EntityRef<Efficiency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EfficiencyWasteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EfficiencyWasteId
		{
			get
			{
				return this._EfficiencyWasteId;
			}
			set
			{
				if ((this._EfficiencyWasteId != value))
				{
					this.OnEfficiencyWasteIdChanging(value);
					this.SendPropertyChanging();
					this._EfficiencyWasteId = value;
					this.SendPropertyChanged("EfficiencyWasteId");
					this.OnEfficiencyWasteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EfficiencyId", DbType="Int")]
		public System.Nullable<int> EfficiencyId
		{
			get
			{
				return this._EfficiencyId;
			}
			set
			{
				if ((this._EfficiencyId != value))
				{
					if (this._Efficiency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEfficiencyIdChanging(value);
					this.SendPropertyChanging();
					this._EfficiencyId = value;
					this.SendPropertyChanged("EfficiencyId");
					this.OnEfficiencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasteType", DbType="VarChar(MAX)")]
		public string WasteType
		{
			get
			{
				return this._WasteType;
			}
			set
			{
				if ((this._WasteType != value))
				{
					this.OnWasteTypeChanging(value);
					this.SendPropertyChanging();
					this._WasteType = value;
					this.SendPropertyChanged("WasteType");
					this.OnWasteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Efficiency_EfficiencyWaste", Storage="_Efficiency", ThisKey="EfficiencyId", OtherKey="EfficiencyId", IsForeignKey=true)]
		public Efficiency Efficiency
		{
			get
			{
				return this._Efficiency.Entity;
			}
			set
			{
				Efficiency previousValue = this._Efficiency.Entity;
				if (((previousValue != value) 
							|| (this._Efficiency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Efficiency.Entity = null;
						previousValue.EfficiencyWastes.Remove(this);
					}
					this._Efficiency.Entity = value;
					if ((value != null))
					{
						value.EfficiencyWastes.Add(this);
						this._EfficiencyId = value.EfficiencyId;
					}
					else
					{
						this._EfficiencyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Efficiency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductQualityEntryQual")]
	public partial class ProductQualityEntryQual : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductQualityEntryQualId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private System.Nullable<int> _QualityLabelQualId;
		
		private string _SustainTakeAction;
		
		private string _Comments;
		
		private EntityRef<QualityLabelQual> _QualityLabelQual;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductQualityEntryQualIdChanging(int value);
    partial void OnProductQualityEntryQualIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnQualityLabelQualIdChanging(System.Nullable<int> value);
    partial void OnQualityLabelQualIdChanged();
    partial void OnSustainTakeActionChanging(string value);
    partial void OnSustainTakeActionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public ProductQualityEntryQual()
		{
			this._QualityLabelQual = default(EntityRef<QualityLabelQual>);
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductQualityEntryQualId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductQualityEntryQualId
		{
			get
			{
				return this._ProductQualityEntryQualId;
			}
			set
			{
				if ((this._ProductQualityEntryQualId != value))
				{
					this.OnProductQualityEntryQualIdChanging(value);
					this.SendPropertyChanging();
					this._ProductQualityEntryQualId = value;
					this.SendPropertyChanged("ProductQualityEntryQualId");
					this.OnProductQualityEntryQualIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityLabelQualId", DbType="Int")]
		public System.Nullable<int> QualityLabelQualId
		{
			get
			{
				return this._QualityLabelQualId;
			}
			set
			{
				if ((this._QualityLabelQualId != value))
				{
					if (this._QualityLabelQual.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityLabelQualIdChanging(value);
					this.SendPropertyChanging();
					this._QualityLabelQualId = value;
					this.SendPropertyChanged("QualityLabelQualId");
					this.OnQualityLabelQualIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SustainTakeAction", DbType="VarChar(MAX)")]
		public string SustainTakeAction
		{
			get
			{
				return this._SustainTakeAction;
			}
			set
			{
				if ((this._SustainTakeAction != value))
				{
					this.OnSustainTakeActionChanging(value);
					this.SendPropertyChanging();
					this._SustainTakeAction = value;
					this.SendPropertyChanged("SustainTakeAction");
					this.OnSustainTakeActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityLabelQual_ProductQualityEntryQual", Storage="_QualityLabelQual", ThisKey="QualityLabelQualId", OtherKey="QualityLabelQualId", IsForeignKey=true)]
		public QualityLabelQual QualityLabelQual
		{
			get
			{
				return this._QualityLabelQual.Entity;
			}
			set
			{
				QualityLabelQual previousValue = this._QualityLabelQual.Entity;
				if (((previousValue != value) 
							|| (this._QualityLabelQual.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityLabelQual.Entity = null;
						previousValue.ProductQualityEntryQuals.Remove(this);
					}
					this._QualityLabelQual.Entity = value;
					if ((value != null))
					{
						value.ProductQualityEntryQuals.Add(this);
						this._QualityLabelQualId = value.QualityLabelQualId;
					}
					else
					{
						this._QualityLabelQualId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityLabelQual");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ProductQualityEntryQual", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.ProductQualityEntryQuals.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.ProductQualityEntryQuals.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductQualityEntryQuant")]
	public partial class ProductQualityEntryQuant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductQualityEntryQuantId;
		
		private System.Nullable<int> _ProductEntryId;
		
		private System.Nullable<int> _QualityLabelQuantId;
		
		private string _Value;
		
		private string _Action;
		
		private EntityRef<QualityLabelQuant> _QualityLabelQuant;
		
		private EntityRef<ProductEntry> _ProductEntry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductQualityEntryQuantIdChanging(int value);
    partial void OnProductQualityEntryQuantIdChanged();
    partial void OnProductEntryIdChanging(System.Nullable<int> value);
    partial void OnProductEntryIdChanged();
    partial void OnQualityLabelQuantIdChanging(System.Nullable<int> value);
    partial void OnQualityLabelQuantIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    #endregion
		
		public ProductQualityEntryQuant()
		{
			this._QualityLabelQuant = default(EntityRef<QualityLabelQuant>);
			this._ProductEntry = default(EntityRef<ProductEntry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductQualityEntryQuantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductQualityEntryQuantId
		{
			get
			{
				return this._ProductQualityEntryQuantId;
			}
			set
			{
				if ((this._ProductQualityEntryQuantId != value))
				{
					this.OnProductQualityEntryQuantIdChanging(value);
					this.SendPropertyChanging();
					this._ProductQualityEntryQuantId = value;
					this.SendPropertyChanged("ProductQualityEntryQuantId");
					this.OnProductQualityEntryQuantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", DbType="Int")]
		public System.Nullable<int> ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					if (this._ProductEntry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityLabelQuantId", DbType="Int")]
		public System.Nullable<int> QualityLabelQuantId
		{
			get
			{
				return this._QualityLabelQuantId;
			}
			set
			{
				if ((this._QualityLabelQuantId != value))
				{
					if (this._QualityLabelQuant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityLabelQuantIdChanging(value);
					this.SendPropertyChanging();
					this._QualityLabelQuantId = value;
					this.SendPropertyChanged("QualityLabelQuantId");
					this.OnQualityLabelQuantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="VarChar(MAX)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityLabelQuant_ProductQualityEntryQuant", Storage="_QualityLabelQuant", ThisKey="QualityLabelQuantId", OtherKey="QualityLabelQuantId", IsForeignKey=true)]
		public QualityLabelQuant QualityLabelQuant
		{
			get
			{
				return this._QualityLabelQuant.Entity;
			}
			set
			{
				QualityLabelQuant previousValue = this._QualityLabelQuant.Entity;
				if (((previousValue != value) 
							|| (this._QualityLabelQuant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityLabelQuant.Entity = null;
						previousValue.ProductQualityEntryQuants.Remove(this);
					}
					this._QualityLabelQuant.Entity = value;
					if ((value != null))
					{
						value.ProductQualityEntryQuants.Add(this);
						this._QualityLabelQuantId = value.QualityLabelQuantId;
					}
					else
					{
						this._QualityLabelQuantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityLabelQuant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ProductQualityEntryQuant", Storage="_ProductEntry", ThisKey="ProductEntryId", OtherKey="ProductEntryId", IsForeignKey=true)]
		public ProductEntry ProductEntry
		{
			get
			{
				return this._ProductEntry.Entity;
			}
			set
			{
				ProductEntry previousValue = this._ProductEntry.Entity;
				if (((previousValue != value) 
							|| (this._ProductEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductEntry.Entity = null;
						previousValue.ProductQualityEntryQuants.Remove(this);
					}
					this._ProductEntry.Entity = value;
					if ((value != null))
					{
						value.ProductQualityEntryQuants.Add(this);
						this._ProductEntryId = value.ProductEntryId;
					}
					else
					{
						this._ProductEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductEntry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualityControl")]
	public partial class QualityControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualityControlId;
		
		private string _Name;
		
		private string _Enabled;
		
		private EntitySet<QualityLabelQual> _QualityLabelQuals;
		
		private EntitySet<QualityLabelQuant> _QualityLabelQuants;
		
		private EntitySet<Recipe> _Recipes;
		
		private EntitySet<ProductEntry> _ProductEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualityControlIdChanging(int value);
    partial void OnQualityControlIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEnabledChanging(string value);
    partial void OnEnabledChanged();
    #endregion
		
		public QualityControl()
		{
			this._QualityLabelQuals = new EntitySet<QualityLabelQual>(new Action<QualityLabelQual>(this.attach_QualityLabelQuals), new Action<QualityLabelQual>(this.detach_QualityLabelQuals));
			this._QualityLabelQuants = new EntitySet<QualityLabelQuant>(new Action<QualityLabelQuant>(this.attach_QualityLabelQuants), new Action<QualityLabelQuant>(this.detach_QualityLabelQuants));
			this._Recipes = new EntitySet<Recipe>(new Action<Recipe>(this.attach_Recipes), new Action<Recipe>(this.detach_Recipes));
			this._ProductEntries = new EntitySet<ProductEntry>(new Action<ProductEntry>(this.attach_ProductEntries), new Action<ProductEntry>(this.detach_ProductEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityControlId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualityControlId
		{
			get
			{
				return this._QualityControlId;
			}
			set
			{
				if ((this._QualityControlId != value))
				{
					this.OnQualityControlIdChanging(value);
					this.SendPropertyChanging();
					this._QualityControlId = value;
					this.SendPropertyChanged("QualityControlId");
					this.OnQualityControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="VarChar(1)")]
		public string Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_QualityLabelQual", Storage="_QualityLabelQuals", ThisKey="QualityControlId", OtherKey="QualityControlId")]
		public EntitySet<QualityLabelQual> QualityLabelQuals
		{
			get
			{
				return this._QualityLabelQuals;
			}
			set
			{
				this._QualityLabelQuals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_QualityLabelQuant", Storage="_QualityLabelQuants", ThisKey="QualityControlId", OtherKey="QualityControlId")]
		public EntitySet<QualityLabelQuant> QualityLabelQuants
		{
			get
			{
				return this._QualityLabelQuants;
			}
			set
			{
				this._QualityLabelQuants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_Recipe", Storage="_Recipes", ThisKey="QualityControlId", OtherKey="QualityControlId")]
		public EntitySet<Recipe> Recipes
		{
			get
			{
				return this._Recipes;
			}
			set
			{
				this._Recipes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_ProductEntry", Storage="_ProductEntries", ThisKey="QualityControlId", OtherKey="QualityControlId")]
		public EntitySet<ProductEntry> ProductEntries
		{
			get
			{
				return this._ProductEntries;
			}
			set
			{
				this._ProductEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QualityLabelQuals(QualityLabelQual entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = this;
		}
		
		private void detach_QualityLabelQuals(QualityLabelQual entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = null;
		}
		
		private void attach_QualityLabelQuants(QualityLabelQuant entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = this;
		}
		
		private void detach_QualityLabelQuants(QualityLabelQuant entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = null;
		}
		
		private void attach_Recipes(Recipe entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = this;
		}
		
		private void detach_Recipes(Recipe entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = null;
		}
		
		private void attach_ProductEntries(ProductEntry entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = this;
		}
		
		private void detach_ProductEntries(ProductEntry entity)
		{
			this.SendPropertyChanging();
			entity.QualityControl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualityLabelQual")]
	public partial class QualityLabelQual : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualityLabelQualId;
		
		private System.Nullable<int> _QualityControlId;
		
		private string _AttributeTesting;
		
		private string _Enabled;
		
		private EntitySet<ProductQualityEntryQual> _ProductQualityEntryQuals;
		
		private EntityRef<QualityControl> _QualityControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualityLabelQualIdChanging(int value);
    partial void OnQualityLabelQualIdChanged();
    partial void OnQualityControlIdChanging(System.Nullable<int> value);
    partial void OnQualityControlIdChanged();
    partial void OnAttributeTestingChanging(string value);
    partial void OnAttributeTestingChanged();
    partial void OnEnabledChanging(string value);
    partial void OnEnabledChanged();
    #endregion
		
		public QualityLabelQual()
		{
			this._ProductQualityEntryQuals = new EntitySet<ProductQualityEntryQual>(new Action<ProductQualityEntryQual>(this.attach_ProductQualityEntryQuals), new Action<ProductQualityEntryQual>(this.detach_ProductQualityEntryQuals));
			this._QualityControl = default(EntityRef<QualityControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityLabelQualId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualityLabelQualId
		{
			get
			{
				return this._QualityLabelQualId;
			}
			set
			{
				if ((this._QualityLabelQualId != value))
				{
					this.OnQualityLabelQualIdChanging(value);
					this.SendPropertyChanging();
					this._QualityLabelQualId = value;
					this.SendPropertyChanged("QualityLabelQualId");
					this.OnQualityLabelQualIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityControlId", DbType="Int")]
		public System.Nullable<int> QualityControlId
		{
			get
			{
				return this._QualityControlId;
			}
			set
			{
				if ((this._QualityControlId != value))
				{
					if (this._QualityControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityControlIdChanging(value);
					this.SendPropertyChanging();
					this._QualityControlId = value;
					this.SendPropertyChanged("QualityControlId");
					this.OnQualityControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeTesting", DbType="VarChar(MAX)")]
		public string AttributeTesting
		{
			get
			{
				return this._AttributeTesting;
			}
			set
			{
				if ((this._AttributeTesting != value))
				{
					this.OnAttributeTestingChanging(value);
					this.SendPropertyChanging();
					this._AttributeTesting = value;
					this.SendPropertyChanged("AttributeTesting");
					this.OnAttributeTestingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="VarChar(1)")]
		public string Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityLabelQual_ProductQualityEntryQual", Storage="_ProductQualityEntryQuals", ThisKey="QualityLabelQualId", OtherKey="QualityLabelQualId")]
		public EntitySet<ProductQualityEntryQual> ProductQualityEntryQuals
		{
			get
			{
				return this._ProductQualityEntryQuals;
			}
			set
			{
				this._ProductQualityEntryQuals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_QualityLabelQual", Storage="_QualityControl", ThisKey="QualityControlId", OtherKey="QualityControlId", IsForeignKey=true)]
		public QualityControl QualityControl
		{
			get
			{
				return this._QualityControl.Entity;
			}
			set
			{
				QualityControl previousValue = this._QualityControl.Entity;
				if (((previousValue != value) 
							|| (this._QualityControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityControl.Entity = null;
						previousValue.QualityLabelQuals.Remove(this);
					}
					this._QualityControl.Entity = value;
					if ((value != null))
					{
						value.QualityLabelQuals.Add(this);
						this._QualityControlId = value.QualityControlId;
					}
					else
					{
						this._QualityControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductQualityEntryQuals(ProductQualityEntryQual entity)
		{
			this.SendPropertyChanging();
			entity.QualityLabelQual = this;
		}
		
		private void detach_ProductQualityEntryQuals(ProductQualityEntryQual entity)
		{
			this.SendPropertyChanging();
			entity.QualityLabelQual = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualityLabelQuant")]
	public partial class QualityLabelQuant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QualityLabelQuantId;
		
		private System.Nullable<int> _QualityControlId;
		
		private string _Test;
		
		private string _Unit;
		
		private string _Aim;
		
		private string _Sustain;
		
		private string _TakeAction;
		
		private string _Abort;
		
		private string _Enabled;
		
		private EntitySet<ProductQualityEntryQuant> _ProductQualityEntryQuants;
		
		private EntityRef<QualityControl> _QualityControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQualityLabelQuantIdChanging(int value);
    partial void OnQualityLabelQuantIdChanged();
    partial void OnQualityControlIdChanging(System.Nullable<int> value);
    partial void OnQualityControlIdChanged();
    partial void OnTestChanging(string value);
    partial void OnTestChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnAimChanging(string value);
    partial void OnAimChanged();
    partial void OnSustainChanging(string value);
    partial void OnSustainChanged();
    partial void OnTakeActionChanging(string value);
    partial void OnTakeActionChanged();
    partial void OnAbortChanging(string value);
    partial void OnAbortChanged();
    partial void OnEnabledChanging(string value);
    partial void OnEnabledChanged();
    #endregion
		
		public QualityLabelQuant()
		{
			this._ProductQualityEntryQuants = new EntitySet<ProductQualityEntryQuant>(new Action<ProductQualityEntryQuant>(this.attach_ProductQualityEntryQuants), new Action<ProductQualityEntryQuant>(this.detach_ProductQualityEntryQuants));
			this._QualityControl = default(EntityRef<QualityControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityLabelQuantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QualityLabelQuantId
		{
			get
			{
				return this._QualityLabelQuantId;
			}
			set
			{
				if ((this._QualityLabelQuantId != value))
				{
					this.OnQualityLabelQuantIdChanging(value);
					this.SendPropertyChanging();
					this._QualityLabelQuantId = value;
					this.SendPropertyChanged("QualityLabelQuantId");
					this.OnQualityLabelQuantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityControlId", DbType="Int")]
		public System.Nullable<int> QualityControlId
		{
			get
			{
				return this._QualityControlId;
			}
			set
			{
				if ((this._QualityControlId != value))
				{
					if (this._QualityControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityControlIdChanging(value);
					this.SendPropertyChanging();
					this._QualityControlId = value;
					this.SendPropertyChanged("QualityControlId");
					this.OnQualityControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test", DbType="VarChar(MAX)")]
		public string Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this.OnTestChanging(value);
					this.SendPropertyChanging();
					this._Test = value;
					this.SendPropertyChanged("Test");
					this.OnTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(MAX)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aim", DbType="VarChar(MAX)")]
		public string Aim
		{
			get
			{
				return this._Aim;
			}
			set
			{
				if ((this._Aim != value))
				{
					this.OnAimChanging(value);
					this.SendPropertyChanging();
					this._Aim = value;
					this.SendPropertyChanged("Aim");
					this.OnAimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sustain", DbType="VarChar(MAX)")]
		public string Sustain
		{
			get
			{
				return this._Sustain;
			}
			set
			{
				if ((this._Sustain != value))
				{
					this.OnSustainChanging(value);
					this.SendPropertyChanging();
					this._Sustain = value;
					this.SendPropertyChanged("Sustain");
					this.OnSustainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeAction", DbType="VarChar(MAX)")]
		public string TakeAction
		{
			get
			{
				return this._TakeAction;
			}
			set
			{
				if ((this._TakeAction != value))
				{
					this.OnTakeActionChanging(value);
					this.SendPropertyChanging();
					this._TakeAction = value;
					this.SendPropertyChanged("TakeAction");
					this.OnTakeActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abort", DbType="VarChar(MAX)")]
		public string Abort
		{
			get
			{
				return this._Abort;
			}
			set
			{
				if ((this._Abort != value))
				{
					this.OnAbortChanging(value);
					this.SendPropertyChanging();
					this._Abort = value;
					this.SendPropertyChanged("Abort");
					this.OnAbortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="VarChar(1)")]
		public string Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityLabelQuant_ProductQualityEntryQuant", Storage="_ProductQualityEntryQuants", ThisKey="QualityLabelQuantId", OtherKey="QualityLabelQuantId")]
		public EntitySet<ProductQualityEntryQuant> ProductQualityEntryQuants
		{
			get
			{
				return this._ProductQualityEntryQuants;
			}
			set
			{
				this._ProductQualityEntryQuants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_QualityLabelQuant", Storage="_QualityControl", ThisKey="QualityControlId", OtherKey="QualityControlId", IsForeignKey=true)]
		public QualityControl QualityControl
		{
			get
			{
				return this._QualityControl.Entity;
			}
			set
			{
				QualityControl previousValue = this._QualityControl.Entity;
				if (((previousValue != value) 
							|| (this._QualityControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityControl.Entity = null;
						previousValue.QualityLabelQuants.Remove(this);
					}
					this._QualityControl.Entity = value;
					if ((value != null))
					{
						value.QualityLabelQuants.Add(this);
						this._QualityControlId = value.QualityControlId;
					}
					else
					{
						this._QualityControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductQualityEntryQuants(ProductQualityEntryQuant entity)
		{
			this.SendPropertyChanging();
			entity.QualityLabelQuant = this;
		}
		
		private void detach_ProductQualityEntryQuants(ProductQualityEntryQuant entity)
		{
			this.SendPropertyChanging();
			entity.QualityLabelQuant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecipeIngredient")]
	public partial class RecipeIngredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipeIngredientId;
		
		private System.Nullable<int> _RecipeId;
		
		private string _Ingredient;
		
		private System.Nullable<double> _Amount;
		
		private string _Unit;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipeIngredientIdChanging(int value);
    partial void OnRecipeIngredientIdChanged();
    partial void OnRecipeIdChanging(System.Nullable<int> value);
    partial void OnRecipeIdChanged();
    partial void OnIngredientChanging(string value);
    partial void OnIngredientChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public RecipeIngredient()
		{
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeIngredientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipeIngredientId
		{
			get
			{
				return this._RecipeIngredientId;
			}
			set
			{
				if ((this._RecipeIngredientId != value))
				{
					this.OnRecipeIngredientIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeIngredientId = value;
					this.SendPropertyChanged("RecipeIngredientId");
					this.OnRecipeIngredientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeId", DbType="Int")]
		public System.Nullable<int> RecipeId
		{
			get
			{
				return this._RecipeId;
			}
			set
			{
				if ((this._RecipeId != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeId = value;
					this.SendPropertyChanged("RecipeId");
					this.OnRecipeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient", DbType="VarChar(MAX)")]
		public string Ingredient
		{
			get
			{
				return this._Ingredient;
			}
			set
			{
				if ((this._Ingredient != value))
				{
					this.OnIngredientChanging(value);
					this.SendPropertyChanging();
					this._Ingredient = value;
					this.SendPropertyChanged("Ingredient");
					this.OnIngredientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_RecipeIngredient", Storage="_Recipe", ThisKey="RecipeId", OtherKey="RecipeId", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.RecipeIngredients.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.RecipeIngredients.Add(this);
						this._RecipeId = value.RecipeId;
					}
					else
					{
						this._RecipeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecipeSteps")]
	public partial class RecipeStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipeStepId;
		
		private System.Nullable<int> _RecipeId;
		
		private System.Nullable<int> _StepNumber;
		
		private string _StepInstructions;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipeStepIdChanging(int value);
    partial void OnRecipeStepIdChanged();
    partial void OnRecipeIdChanging(System.Nullable<int> value);
    partial void OnRecipeIdChanged();
    partial void OnStepNumberChanging(System.Nullable<int> value);
    partial void OnStepNumberChanged();
    partial void OnStepInstructionsChanging(string value);
    partial void OnStepInstructionsChanged();
    #endregion
		
		public RecipeStep()
		{
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeStepId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipeStepId
		{
			get
			{
				return this._RecipeStepId;
			}
			set
			{
				if ((this._RecipeStepId != value))
				{
					this.OnRecipeStepIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeStepId = value;
					this.SendPropertyChanged("RecipeStepId");
					this.OnRecipeStepIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeId", DbType="Int")]
		public System.Nullable<int> RecipeId
		{
			get
			{
				return this._RecipeId;
			}
			set
			{
				if ((this._RecipeId != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeId = value;
					this.SendPropertyChanged("RecipeId");
					this.OnRecipeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepNumber", DbType="Int")]
		public System.Nullable<int> StepNumber
		{
			get
			{
				return this._StepNumber;
			}
			set
			{
				if ((this._StepNumber != value))
				{
					this.OnStepNumberChanging(value);
					this.SendPropertyChanging();
					this._StepNumber = value;
					this.SendPropertyChanged("StepNumber");
					this.OnStepNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StepInstructions", DbType="VarChar(MAX)")]
		public string StepInstructions
		{
			get
			{
				return this._StepInstructions;
			}
			set
			{
				if ((this._StepInstructions != value))
				{
					this.OnStepInstructionsChanging(value);
					this.SendPropertyChanging();
					this._StepInstructions = value;
					this.SendPropertyChanged("StepInstructions");
					this.OnStepInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_RecipeStep", Storage="_Recipe", ThisKey="RecipeId", OtherKey="RecipeId", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.RecipeSteps.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.RecipeSteps.Add(this);
						this._RecipeId = value.RecipeId;
					}
					else
					{
						this._RecipeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryId;
		
		private string _Unit;
		
		private System.Nullable<decimal> _PricePerUnit;
		
		private System.Nullable<double> _PreviousStock;
		
		private System.Nullable<double> _Stock;
		
		private System.Nullable<double> _ActualUsage;
		
		private System.Nullable<double> _PredictedUsage;
		
		private string _Supplier;
		
		private System.Data.Linq.Binary _Certificate;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _SnapshotDate;
		
		private string _Enabled;
		
		private string _Type;
		
		private string _LotCode;
		
		private EntitySet<Traceability> _Traceabilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPricePerUnitChanging(System.Nullable<decimal> value);
    partial void OnPricePerUnitChanged();
    partial void OnPreviousStockChanging(System.Nullable<double> value);
    partial void OnPreviousStockChanged();
    partial void OnStockChanging(System.Nullable<double> value);
    partial void OnStockChanged();
    partial void OnActualUsageChanging(System.Nullable<double> value);
    partial void OnActualUsageChanged();
    partial void OnPredictedUsageChanging(System.Nullable<double> value);
    partial void OnPredictedUsageChanged();
    partial void OnSupplierChanging(string value);
    partial void OnSupplierChanged();
    partial void OnCertificateChanging(System.Data.Linq.Binary value);
    partial void OnCertificateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSnapshotDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSnapshotDateChanged();
    partial void OnEnabledChanging(string value);
    partial void OnEnabledChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLotCodeChanging(string value);
    partial void OnLotCodeChanged();
    #endregion
		
		public Inventory()
		{
			this._Traceabilities = new EntitySet<Traceability>(new Action<Traceability>(this.attach_Traceabilities), new Action<Traceability>(this.detach_Traceabilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerUnit", DbType="Money")]
		public System.Nullable<decimal> PricePerUnit
		{
			get
			{
				return this._PricePerUnit;
			}
			set
			{
				if ((this._PricePerUnit != value))
				{
					this.OnPricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._PricePerUnit = value;
					this.SendPropertyChanged("PricePerUnit");
					this.OnPricePerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviousStock", DbType="Float")]
		public System.Nullable<double> PreviousStock
		{
			get
			{
				return this._PreviousStock;
			}
			set
			{
				if ((this._PreviousStock != value))
				{
					this.OnPreviousStockChanging(value);
					this.SendPropertyChanging();
					this._PreviousStock = value;
					this.SendPropertyChanged("PreviousStock");
					this.OnPreviousStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Float")]
		public System.Nullable<double> Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualUsage", DbType="Float")]
		public System.Nullable<double> ActualUsage
		{
			get
			{
				return this._ActualUsage;
			}
			set
			{
				if ((this._ActualUsage != value))
				{
					this.OnActualUsageChanging(value);
					this.SendPropertyChanging();
					this._ActualUsage = value;
					this.SendPropertyChanged("ActualUsage");
					this.OnActualUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PredictedUsage", DbType="Float")]
		public System.Nullable<double> PredictedUsage
		{
			get
			{
				return this._PredictedUsage;
			}
			set
			{
				if ((this._PredictedUsage != value))
				{
					this.OnPredictedUsageChanging(value);
					this.SendPropertyChanging();
					this._PredictedUsage = value;
					this.SendPropertyChanged("PredictedUsage");
					this.OnPredictedUsageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier", DbType="VarChar(50)")]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this.OnSupplierChanging(value);
					this.SendPropertyChanging();
					this._Supplier = value;
					this.SendPropertyChanged("Supplier");
					this.OnSupplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Certificate", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Certificate
		{
			get
			{
				return this._Certificate;
			}
			set
			{
				if ((this._Certificate != value))
				{
					this.OnCertificateChanging(value);
					this.SendPropertyChanging();
					this._Certificate = value;
					this.SendPropertyChanged("Certificate");
					this.OnCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SnapshotDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SnapshotDate
		{
			get
			{
				return this._SnapshotDate;
			}
			set
			{
				if ((this._SnapshotDate != value))
				{
					this.OnSnapshotDateChanging(value);
					this.SendPropertyChanging();
					this._SnapshotDate = value;
					this.SendPropertyChanged("SnapshotDate");
					this.OnSnapshotDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="VarChar(1)")]
		public string Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotCode", DbType="VarChar(MAX)")]
		public string LotCode
		{
			get
			{
				return this._LotCode;
			}
			set
			{
				if ((this._LotCode != value))
				{
					this.OnLotCodeChanging(value);
					this.SendPropertyChanging();
					this._LotCode = value;
					this.SendPropertyChanged("LotCode");
					this.OnLotCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_Traceability", Storage="_Traceabilities", ThisKey="InventoryId", OtherKey="InventoryId")]
		public EntitySet<Traceability> Traceabilities
		{
			get
			{
				return this._Traceabilities;
			}
			set
			{
				this._Traceabilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Traceabilities(Traceability entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_Traceabilities(Traceability entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe")]
	public partial class Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipeId;
		
		private string _Name;
		
		private string _TraceabilityRequired;
		
		private string _EfficiencyRequired;
		
		private System.Nullable<int> _QualityControlId;
		
		private System.Nullable<double> _ExpectedWeight;
		
		private System.Data.Linq.Binary _haccp;
		
		private EntitySet<RecipeIngredient> _RecipeIngredients;
		
		private EntitySet<RecipeStep> _RecipeSteps;
		
		private EntitySet<ProductEntry> _ProductEntries;
		
		private EntityRef<QualityControl> _QualityControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipeIdChanging(int value);
    partial void OnRecipeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTraceabilityRequiredChanging(string value);
    partial void OnTraceabilityRequiredChanged();
    partial void OnEfficiencyRequiredChanging(string value);
    partial void OnEfficiencyRequiredChanged();
    partial void OnQualityControlIdChanging(System.Nullable<int> value);
    partial void OnQualityControlIdChanged();
    partial void OnExpectedWeightChanging(System.Nullable<double> value);
    partial void OnExpectedWeightChanged();
    partial void OnhaccpChanging(System.Data.Linq.Binary value);
    partial void OnhaccpChanged();
    #endregion
		
		public Recipe()
		{
			this._RecipeIngredients = new EntitySet<RecipeIngredient>(new Action<RecipeIngredient>(this.attach_RecipeIngredients), new Action<RecipeIngredient>(this.detach_RecipeIngredients));
			this._RecipeSteps = new EntitySet<RecipeStep>(new Action<RecipeStep>(this.attach_RecipeSteps), new Action<RecipeStep>(this.detach_RecipeSteps));
			this._ProductEntries = new EntitySet<ProductEntry>(new Action<ProductEntry>(this.attach_ProductEntries), new Action<ProductEntry>(this.detach_ProductEntries));
			this._QualityControl = default(EntityRef<QualityControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipeId
		{
			get
			{
				return this._RecipeId;
			}
			set
			{
				if ((this._RecipeId != value))
				{
					this.OnRecipeIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeId = value;
					this.SendPropertyChanged("RecipeId");
					this.OnRecipeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TraceabilityRequired", DbType="VarChar(1)")]
		public string TraceabilityRequired
		{
			get
			{
				return this._TraceabilityRequired;
			}
			set
			{
				if ((this._TraceabilityRequired != value))
				{
					this.OnTraceabilityRequiredChanging(value);
					this.SendPropertyChanging();
					this._TraceabilityRequired = value;
					this.SendPropertyChanged("TraceabilityRequired");
					this.OnTraceabilityRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EfficiencyRequired", DbType="VarChar(1)")]
		public string EfficiencyRequired
		{
			get
			{
				return this._EfficiencyRequired;
			}
			set
			{
				if ((this._EfficiencyRequired != value))
				{
					this.OnEfficiencyRequiredChanging(value);
					this.SendPropertyChanging();
					this._EfficiencyRequired = value;
					this.SendPropertyChanged("EfficiencyRequired");
					this.OnEfficiencyRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityControlId", DbType="Int")]
		public System.Nullable<int> QualityControlId
		{
			get
			{
				return this._QualityControlId;
			}
			set
			{
				if ((this._QualityControlId != value))
				{
					if (this._QualityControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityControlIdChanging(value);
					this.SendPropertyChanging();
					this._QualityControlId = value;
					this.SendPropertyChanged("QualityControlId");
					this.OnQualityControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedWeight", DbType="Float")]
		public System.Nullable<double> ExpectedWeight
		{
			get
			{
				return this._ExpectedWeight;
			}
			set
			{
				if ((this._ExpectedWeight != value))
				{
					this.OnExpectedWeightChanging(value);
					this.SendPropertyChanging();
					this._ExpectedWeight = value;
					this.SendPropertyChanged("ExpectedWeight");
					this.OnExpectedWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_haccp", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary haccp
		{
			get
			{
				return this._haccp;
			}
			set
			{
				if ((this._haccp != value))
				{
					this.OnhaccpChanging(value);
					this.SendPropertyChanging();
					this._haccp = value;
					this.SendPropertyChanged("haccp");
					this.OnhaccpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_RecipeIngredient", Storage="_RecipeIngredients", ThisKey="RecipeId", OtherKey="RecipeId")]
		public EntitySet<RecipeIngredient> RecipeIngredients
		{
			get
			{
				return this._RecipeIngredients;
			}
			set
			{
				this._RecipeIngredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_RecipeStep", Storage="_RecipeSteps", ThisKey="RecipeId", OtherKey="RecipeId")]
		public EntitySet<RecipeStep> RecipeSteps
		{
			get
			{
				return this._RecipeSteps;
			}
			set
			{
				this._RecipeSteps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_ProductEntry", Storage="_ProductEntries", ThisKey="RecipeId", OtherKey="RecipeEntryId")]
		public EntitySet<ProductEntry> ProductEntries
		{
			get
			{
				return this._ProductEntries;
			}
			set
			{
				this._ProductEntries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_Recipe", Storage="_QualityControl", ThisKey="QualityControlId", OtherKey="QualityControlId", IsForeignKey=true)]
		public QualityControl QualityControl
		{
			get
			{
				return this._QualityControl.Entity;
			}
			set
			{
				QualityControl previousValue = this._QualityControl.Entity;
				if (((previousValue != value) 
							|| (this._QualityControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityControl.Entity = null;
						previousValue.Recipes.Remove(this);
					}
					this._QualityControl.Entity = value;
					if ((value != null))
					{
						value.Recipes.Add(this);
						this._QualityControlId = value.QualityControlId;
					}
					else
					{
						this._QualityControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RecipeIngredients(RecipeIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_RecipeIngredients(RecipeIngredient entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_RecipeSteps(RecipeStep entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_RecipeSteps(RecipeStep entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_ProductEntries(ProductEntry entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_ProductEntries(ProductEntry entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceRow")]
	public partial class InvoiceRow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceRowId;
		
		private string _Product;
		
		private double _Quantity;
		
		private decimal _RatePer;
		
		private string _CreditAccount;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _CodeDate;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceRowIdChanging(int value);
    partial void OnInvoiceRowIdChanged();
    partial void OnProductChanging(string value);
    partial void OnProductChanged();
    partial void OnQuantityChanging(double value);
    partial void OnQuantityChanged();
    partial void OnRatePerChanging(decimal value);
    partial void OnRatePerChanged();
    partial void OnCreditAccountChanging(string value);
    partial void OnCreditAccountChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnCodeDateChanging(string value);
    partial void OnCodeDateChanged();
    #endregion
		
		public InvoiceRow()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceRowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceRowId
		{
			get
			{
				return this._InvoiceRowId;
			}
			set
			{
				if ((this._InvoiceRowId != value))
				{
					this.OnInvoiceRowIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceRowId = value;
					this.SendPropertyChanged("InvoiceRowId");
					this.OnInvoiceRowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this.OnProductChanging(value);
					this.SendPropertyChanging();
					this._Product = value;
					this.SendPropertyChanged("Product");
					this.OnProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float NOT NULL")]
		public double Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatePer", DbType="Decimal(18,0) NOT NULL")]
		public decimal RatePer
		{
			get
			{
				return this._RatePer;
			}
			set
			{
				if ((this._RatePer != value))
				{
					this.OnRatePerChanging(value);
					this.SendPropertyChanging();
					this._RatePer = value;
					this.SendPropertyChanged("RatePer");
					this.OnRatePerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditAccount", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CreditAccount
		{
			get
			{
				return this._CreditAccount;
			}
			set
			{
				if ((this._CreditAccount != value))
				{
					this.OnCreditAccountChanging(value);
					this.SendPropertyChanging();
					this._CreditAccount = value;
					this.SendPropertyChanged("CreditAccount");
					this.OnCreditAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeDate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CodeDate
		{
			get
			{
				return this._CodeDate;
			}
			set
			{
				if ((this._CodeDate != value))
				{
					this.OnCodeDateChanging(value);
					this.SendPropertyChanging();
					this._CodeDate = value;
					this.SendPropertyChanged("CodeDate");
					this.OnCodeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceRow", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="InvoiceId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceRows.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceRows.Add(this);
						this._InvoiceId = value.InvoiceId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _InvoiceNumber;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<decimal> _Total;
		
		private string _Status;
		
		private EntitySet<InvoiceRow> _InvoiceRows;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnInvoiceNumberChanging(string value);
    partial void OnInvoiceNumberChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceRows = new EntitySet<InvoiceRow>(new Action<InvoiceRow>(this.attach_InvoiceRows), new Action<InvoiceRow>(this.detach_InvoiceRows));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNumber", DbType="NVarChar(MAX)")]
		public string InvoiceNumber
		{
			get
			{
				return this._InvoiceNumber;
			}
			set
			{
				if ((this._InvoiceNumber != value))
				{
					this.OnInvoiceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNumber = value;
					this.SendPropertyChanged("InvoiceNumber");
					this.OnInvoiceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(MAX)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceRow", Storage="_InvoiceRows", ThisKey="InvoiceId", OtherKey="InvoiceId")]
		public EntitySet<InvoiceRow> InvoiceRows
		{
			get
			{
				return this._InvoiceRows;
			}
			set
			{
				this._InvoiceRows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceRows(InvoiceRow entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceRows(InvoiceRow entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private string _Name;
		
		private string _AccountNumber;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _PhoneNumber;
		
		private string _Type;
		
		private string _Enabled;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEnabledChanging(string value);
    partial void OnEnabledChanged();
    #endregion
		
		public Customer()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="VarChar(MAX)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(MAX)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(MAX)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(MAX)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="VarChar(1)")]
		public string Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductEntry")]
	public partial class ProductEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductEntryId;
		
		private System.Nullable<int> _RecipeEntryId;
		
		private string _CodeDate;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _AmountPackaged;
		
		private System.Nullable<int> _AmountProduced;
		
		private string _Downtime;
		
		private string _ProductionNotes;
		
		private string _StudentManager;
		
		private string _PlantManager;
		
		private string _QualityPerformer;
		
		private System.Nullable<int> _QualityControlId;
		
		private string _Complete;
		
		private System.Data.Linq.Binary _haacp;
		
		private EntitySet<Traceability> _Traceabilities;
		
		private EntitySet<ChocolateControl> _ChocolateControls;
		
		private EntitySet<ChocolateQuality> _ChocolateQualities;
		
		private EntitySet<Efficiency> _Efficiencies;
		
		private EntitySet<ProductQualityEntryQual> _ProductQualityEntryQuals;
		
		private EntitySet<ProductQualityEntryQuant> _ProductQualityEntryQuants;
		
		private EntityRef<QualityControl> _QualityControl;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductEntryIdChanging(int value);
    partial void OnProductEntryIdChanged();
    partial void OnRecipeEntryIdChanging(System.Nullable<int> value);
    partial void OnRecipeEntryIdChanged();
    partial void OnCodeDateChanging(string value);
    partial void OnCodeDateChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnAmountPackagedChanging(System.Nullable<int> value);
    partial void OnAmountPackagedChanged();
    partial void OnAmountProducedChanging(System.Nullable<int> value);
    partial void OnAmountProducedChanged();
    partial void OnDowntimeChanging(string value);
    partial void OnDowntimeChanged();
    partial void OnProductionNotesChanging(string value);
    partial void OnProductionNotesChanged();
    partial void OnStudentManagerChanging(string value);
    partial void OnStudentManagerChanged();
    partial void OnPlantManagerChanging(string value);
    partial void OnPlantManagerChanged();
    partial void OnQualityPerformerChanging(string value);
    partial void OnQualityPerformerChanged();
    partial void OnQualityControlIdChanging(System.Nullable<int> value);
    partial void OnQualityControlIdChanged();
    partial void OnCompleteChanging(string value);
    partial void OnCompleteChanged();
    partial void OnhaacpChanging(System.Data.Linq.Binary value);
    partial void OnhaacpChanged();
    #endregion
		
		public ProductEntry()
		{
			this._Traceabilities = new EntitySet<Traceability>(new Action<Traceability>(this.attach_Traceabilities), new Action<Traceability>(this.detach_Traceabilities));
			this._ChocolateControls = new EntitySet<ChocolateControl>(new Action<ChocolateControl>(this.attach_ChocolateControls), new Action<ChocolateControl>(this.detach_ChocolateControls));
			this._ChocolateQualities = new EntitySet<ChocolateQuality>(new Action<ChocolateQuality>(this.attach_ChocolateQualities), new Action<ChocolateQuality>(this.detach_ChocolateQualities));
			this._Efficiencies = new EntitySet<Efficiency>(new Action<Efficiency>(this.attach_Efficiencies), new Action<Efficiency>(this.detach_Efficiencies));
			this._ProductQualityEntryQuals = new EntitySet<ProductQualityEntryQual>(new Action<ProductQualityEntryQual>(this.attach_ProductQualityEntryQuals), new Action<ProductQualityEntryQual>(this.detach_ProductQualityEntryQuals));
			this._ProductQualityEntryQuants = new EntitySet<ProductQualityEntryQuant>(new Action<ProductQualityEntryQuant>(this.attach_ProductQualityEntryQuants), new Action<ProductQualityEntryQuant>(this.detach_ProductQualityEntryQuants));
			this._QualityControl = default(EntityRef<QualityControl>);
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductEntryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductEntryId
		{
			get
			{
				return this._ProductEntryId;
			}
			set
			{
				if ((this._ProductEntryId != value))
				{
					this.OnProductEntryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductEntryId = value;
					this.SendPropertyChanged("ProductEntryId");
					this.OnProductEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeEntryId", DbType="Int")]
		public System.Nullable<int> RecipeEntryId
		{
			get
			{
				return this._RecipeEntryId;
			}
			set
			{
				if ((this._RecipeEntryId != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeEntryIdChanging(value);
					this.SendPropertyChanging();
					this._RecipeEntryId = value;
					this.SendPropertyChanged("RecipeEntryId");
					this.OnRecipeEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeDate", DbType="VarChar(50)")]
		public string CodeDate
		{
			get
			{
				return this._CodeDate;
			}
			set
			{
				if ((this._CodeDate != value))
				{
					this.OnCodeDateChanging(value);
					this.SendPropertyChanging();
					this._CodeDate = value;
					this.SendPropertyChanged("CodeDate");
					this.OnCodeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPackaged", DbType="Int")]
		public System.Nullable<int> AmountPackaged
		{
			get
			{
				return this._AmountPackaged;
			}
			set
			{
				if ((this._AmountPackaged != value))
				{
					this.OnAmountPackagedChanging(value);
					this.SendPropertyChanging();
					this._AmountPackaged = value;
					this.SendPropertyChanged("AmountPackaged");
					this.OnAmountPackagedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountProduced", DbType="Int")]
		public System.Nullable<int> AmountProduced
		{
			get
			{
				return this._AmountProduced;
			}
			set
			{
				if ((this._AmountProduced != value))
				{
					this.OnAmountProducedChanging(value);
					this.SendPropertyChanging();
					this._AmountProduced = value;
					this.SendPropertyChanged("AmountProduced");
					this.OnAmountProducedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Downtime", DbType="VarChar(50)")]
		public string Downtime
		{
			get
			{
				return this._Downtime;
			}
			set
			{
				if ((this._Downtime != value))
				{
					this.OnDowntimeChanging(value);
					this.SendPropertyChanging();
					this._Downtime = value;
					this.SendPropertyChanged("Downtime");
					this.OnDowntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionNotes", DbType="VarChar(MAX)")]
		public string ProductionNotes
		{
			get
			{
				return this._ProductionNotes;
			}
			set
			{
				if ((this._ProductionNotes != value))
				{
					this.OnProductionNotesChanging(value);
					this.SendPropertyChanging();
					this._ProductionNotes = value;
					this.SendPropertyChanged("ProductionNotes");
					this.OnProductionNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentManager", DbType="VarChar(50)")]
		public string StudentManager
		{
			get
			{
				return this._StudentManager;
			}
			set
			{
				if ((this._StudentManager != value))
				{
					this.OnStudentManagerChanging(value);
					this.SendPropertyChanging();
					this._StudentManager = value;
					this.SendPropertyChanged("StudentManager");
					this.OnStudentManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantManager", DbType="VarChar(50)")]
		public string PlantManager
		{
			get
			{
				return this._PlantManager;
			}
			set
			{
				if ((this._PlantManager != value))
				{
					this.OnPlantManagerChanging(value);
					this.SendPropertyChanging();
					this._PlantManager = value;
					this.SendPropertyChanged("PlantManager");
					this.OnPlantManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityPerformer", DbType="VarChar(50)")]
		public string QualityPerformer
		{
			get
			{
				return this._QualityPerformer;
			}
			set
			{
				if ((this._QualityPerformer != value))
				{
					this.OnQualityPerformerChanging(value);
					this.SendPropertyChanging();
					this._QualityPerformer = value;
					this.SendPropertyChanged("QualityPerformer");
					this.OnQualityPerformerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityControlId", DbType="Int")]
		public System.Nullable<int> QualityControlId
		{
			get
			{
				return this._QualityControlId;
			}
			set
			{
				if ((this._QualityControlId != value))
				{
					if (this._QualityControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualityControlIdChanging(value);
					this.SendPropertyChanging();
					this._QualityControlId = value;
					this.SendPropertyChanged("QualityControlId");
					this.OnQualityControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Complete", DbType="VarChar(1)")]
		public string Complete
		{
			get
			{
				return this._Complete;
			}
			set
			{
				if ((this._Complete != value))
				{
					this.OnCompleteChanging(value);
					this.SendPropertyChanging();
					this._Complete = value;
					this.SendPropertyChanged("Complete");
					this.OnCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_haacp", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary haacp
		{
			get
			{
				return this._haacp;
			}
			set
			{
				if ((this._haacp != value))
				{
					this.OnhaacpChanging(value);
					this.SendPropertyChanging();
					this._haacp = value;
					this.SendPropertyChanged("haacp");
					this.OnhaacpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_Traceability", Storage="_Traceabilities", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<Traceability> Traceabilities
		{
			get
			{
				return this._Traceabilities;
			}
			set
			{
				this._Traceabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ChocolateControl", Storage="_ChocolateControls", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<ChocolateControl> ChocolateControls
		{
			get
			{
				return this._ChocolateControls;
			}
			set
			{
				this._ChocolateControls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ChocolateQuality", Storage="_ChocolateQualities", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<ChocolateQuality> ChocolateQualities
		{
			get
			{
				return this._ChocolateQualities;
			}
			set
			{
				this._ChocolateQualities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_Efficiency", Storage="_Efficiencies", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<Efficiency> Efficiencies
		{
			get
			{
				return this._Efficiencies;
			}
			set
			{
				this._Efficiencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ProductQualityEntryQual", Storage="_ProductQualityEntryQuals", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<ProductQualityEntryQual> ProductQualityEntryQuals
		{
			get
			{
				return this._ProductQualityEntryQuals;
			}
			set
			{
				this._ProductQualityEntryQuals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductEntry_ProductQualityEntryQuant", Storage="_ProductQualityEntryQuants", ThisKey="ProductEntryId", OtherKey="ProductEntryId")]
		public EntitySet<ProductQualityEntryQuant> ProductQualityEntryQuants
		{
			get
			{
				return this._ProductQualityEntryQuants;
			}
			set
			{
				this._ProductQualityEntryQuants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualityControl_ProductEntry", Storage="_QualityControl", ThisKey="QualityControlId", OtherKey="QualityControlId", IsForeignKey=true)]
		public QualityControl QualityControl
		{
			get
			{
				return this._QualityControl.Entity;
			}
			set
			{
				QualityControl previousValue = this._QualityControl.Entity;
				if (((previousValue != value) 
							|| (this._QualityControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualityControl.Entity = null;
						previousValue.ProductEntries.Remove(this);
					}
					this._QualityControl.Entity = value;
					if ((value != null))
					{
						value.ProductEntries.Add(this);
						this._QualityControlId = value.QualityControlId;
					}
					else
					{
						this._QualityControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QualityControl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_ProductEntry", Storage="_Recipe", ThisKey="RecipeEntryId", OtherKey="RecipeId", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.ProductEntries.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.ProductEntries.Add(this);
						this._RecipeEntryId = value.RecipeId;
					}
					else
					{
						this._RecipeEntryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Traceabilities(Traceability entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_Traceabilities(Traceability entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
		
		private void attach_ChocolateControls(ChocolateControl entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_ChocolateControls(ChocolateControl entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
		
		private void attach_ChocolateQualities(ChocolateQuality entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_ChocolateQualities(ChocolateQuality entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
		
		private void attach_Efficiencies(Efficiency entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_Efficiencies(Efficiency entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
		
		private void attach_ProductQualityEntryQuals(ProductQualityEntryQual entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_ProductQualityEntryQuals(ProductQualityEntryQual entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
		
		private void attach_ProductQualityEntryQuants(ProductQualityEntryQuant entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = this;
		}
		
		private void detach_ProductQualityEntryQuants(ProductQualityEntryQuant entity)
		{
			this.SendPropertyChanging();
			entity.ProductEntry = null;
		}
	}
}
#pragma warning restore 1591
